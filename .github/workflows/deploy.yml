name: 'Build and Deploy Guestbook'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: k8s-learning-cluster
  ECR_REPOSITORY: k8s-learning/guestbook

jobs:
  build:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    
    outputs:
      image-uri: ${{ steps.push.outputs.image-uri }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image
      id: push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.ref == 'refs/heads/main' && 'latest' || format('develop-{0}', github.sha) }}
      run: |
        echo "Building image with tag: $IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Output the full image URI
        echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "✅ Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-dev:
    name: 'Deploy to Development'
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to Kubernetes
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: develop-${{ github.sha }}
      run: |
        echo "=== Deploying with following configuration ==="
        echo "ECR_REGISTRY: $ECR_REGISTRY"
        echo "ECR_REPOSITORY: $ECR_REPOSITORY"
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "Full image from build job: ${{ needs.build.outputs.image-uri }}"
        echo ""
        
        # Verify variables are set
        if [ -z "$ECR_REGISTRY" ]; then
          echo "ERROR: ECR_REGISTRY is empty!"
          exit 1
        fi
        
        echo "=== Deployment YAML after substitution ==="
        envsubst < k8s/deployment.yaml | tee /tmp/deployment.yaml
        echo ""
        kubectl apply -f /tmp/deployment.yaml
        
    - name: Wait and check pods
      run: |
        echo "Waiting 30 seconds for pods to start..."
        sleep 30
        echo ""
        echo "=== Pod Status ==="
        kubectl get pods -n default -l app=guestbook -o wide
        
    - name: Debug pod issues
      if: always()
      run: |
        echo "=== Describe Deployment ==="
        kubectl describe deployment guestbook -n default
        echo ""
        echo "=== Pod Details ==="
        kubectl describe pods -n default -l app=guestbook
        echo ""
        echo "=== Pod Logs ==="
        for pod in $(kubectl get pods -n default -l app=guestbook -o name); do
          echo "--- Logs from $pod ---"
          kubectl logs -n default $pod --tail=100 || echo "Could not get logs from $pod"
          echo ""
        done
        echo ""
        echo "=== Recent Events ==="
        kubectl get events -n default --sort-by='.lastTimestamp' | tail -30
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/guestbook -n default --timeout=5m
        kubectl get services guestbook -n default

  deploy-prod:
    name: 'Deploy to Production'
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to Kubernetes
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        echo "=== Deploying with following configuration ==="
        echo "ECR_REGISTRY: $ECR_REGISTRY"
        echo "ECR_REPOSITORY: $ECR_REPOSITORY"
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "Full image from build job: ${{ needs.build.outputs.image-uri }}"
        echo ""
        
        # Verify variables are set
        if [ -z "$ECR_REGISTRY" ]; then
          echo "ERROR: ECR_REGISTRY is empty!"
          exit 1
        fi
        
        echo "=== Deployment YAML after substitution ==="
        envsubst < k8s/deployment.yaml | tee /tmp/deployment.yaml
        echo ""
        kubectl apply -f /tmp/deployment.yaml
        
    - name: Debug pod issues
      if: always()
      run: |
        echo "=== Pod Status ==="
        kubectl get pods -n default -l app=guestbook -o wide
        echo ""
        echo "=== Describe Pods ==="
        kubectl describe pods -n default -l app=guestbook
        echo ""
        echo "=== Pod Logs ==="
        for pod in $(kubectl get pods -n default -l app=guestbook -o name); do
          echo "--- Logs from $pod ---"
          kubectl logs -n default $pod --tail=100 || echo "Could not get logs"
        done
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/guestbook -n default --timeout=5m
        
    - name: Get LoadBalancer URL
      id: get-url
      run: |
        echo "Waiting for LoadBalancer to be ready..."
        sleep 30
        LB_URL=$(kubectl get service guestbook -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Application URL: http://$LB_URL"
        echo "url=$LB_URL" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        URL="http://${{ steps.get-url.outputs.url }}"
        
        # Wait for endpoint to be available
        for i in {1..30}; do
          if curl -f "$URL/hello" > /dev/null 2>&1; then
            echo "✅ Application is healthy!"
            exit 0
          fi
          echo "Waiting for application... ($i/30)"
          sleep 10
        done
        
        echo "❌ Application health check failed"
        exit 1

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** http://${{ steps.get-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Kubernetes Resources:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl get all -n default -l app=guestbook >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
