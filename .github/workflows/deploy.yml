name: 'Build and Deploy Guestbook'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: k8s-learning-cluster
  ECR_REPOSITORY: k8s-learning/guestbook

jobs:
  build:
    name: 'Build and Push Docker Image'
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  deploy-dev:
    name: 'Deploy to Development'
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to Kubernetes
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: develop-${{ github.sha }}
      run: |
        # Replace image placeholders in deployment
        envsubst < k8s/deployment.yaml | kubectl apply -f -
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/guestbook -n default --timeout=5m
        kubectl get services guestbook -n default

  deploy-prod:
    name: 'Deploy to Production'
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to Kubernetes
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Replace image placeholders in deployment
        envsubst < k8s/deployment.yaml | kubectl apply -f -
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/guestbook -n default --timeout=5m
        
    - name: Get LoadBalancer URL
      id: get-url
      run: |
        echo "Waiting for LoadBalancer to be ready..."
        sleep 30
        LB_URL=$(kubectl get service guestbook -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Application URL: http://$LB_URL"
        echo "url=$LB_URL" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        URL="http://${{ steps.get-url.outputs.url }}"
        
        # Wait for endpoint to be available
        for i in {1..30}; do
          if curl -f "$URL/hello" > /dev/null 2>&1; then
            echo "✅ Application is healthy!"
            exit 0
          fi
          echo "Waiting for application... ($i/30)"
          sleep 10
        done
        
        echo "❌ Application health check failed"
        exit 1

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** http://${{ steps.get-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Kubernetes Resources:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl get all -n default -l app=guestbook >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
